{"version":3,"sources":["SettingsForm.js","Cell.js","Game.js","services/GameFieldGenerator.js","GameOver.js","Winner.js","App.js","index.js"],"names":["SettingsForm","_ref","colsnum","difficulty","onSubmit","updateFieldSettigns","updateLevelSettings","difficultyValue","fieldSizeValue","concat","react_default","a","createElement","action","className","onClick","Cell","cell","onContextMenu","col","row","cellClass","value","open","marked","cellValue","detonated","data-col","data-row","Game","props","cells","field","map","el","index","result","i","length","key","push","src_Cell_0","rowsnum","gameStyle","fontSize","style","GameFieldGenerator","range","Math","floor","random","array","reduce","acc","filter","cols","rows","j","diff","bombNumber","c","this","getRand","r","rightCol","topRow","bottomRow","isNaN","startGame","allCells","countCellsToOpen","GameOver","newGame","Winner","App","state","gameOver","openedCells","handleInput","target","_this","setState","Object","defineProperty","name","parseInt","number","newSize","newLevel","handleForm","e","preventDefault","_this$state","game","generateField","handleRightClick","currentTarget","getAttribute","handleLeftClick","_this$state2","openAllCellsBeside","openAllCells","countOpenedCells","f","_this$state3","openUnmarkCell","x","y","arguments","undefined","_this$state4","_this$state5","src_Game_0","src_SettingsForm_0","onChange","src_GameOver_0","src_Winner_0","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.38534032.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SettingsForm.css';\r\n\r\nconst SettingsForm = ({ colsnum, difficulty, onSubmit, updateFieldSettigns, updateLevelSettings }) => {\r\n\r\n  const difficultyValue = difficulty === 1 ? 'easy' : (difficulty === 2 ? 'medium' : 'hard');\r\n  const fieldSizeValue = `${colsnum}x${colsnum}`;\r\n\r\n  return (\r\n    <form action=\"\" className=\"input-form\" onSubmit={onSubmit}>\r\n      <h1>Minesweeper</h1>\r\n\r\n      <label>\r\n        <div>Field size</div>\r\n        <div>\r\n          <i className=\"fa fa-chevron-left\" onClick={() => updateFieldSettigns(-5)}></i>\r\n          {fieldSizeValue}\r\n          <i className=\"fa fa-chevron-right\" onClick={() => updateFieldSettigns(5)}></i>\r\n        </div>\r\n      </label>\r\n      <label>\r\n        <div>Difficulty</div>\r\n        <div>\r\n          <i className=\"fa fa-chevron-left\" onClick={() => updateLevelSettings(-1)}></i>\r\n          <span>{difficultyValue}</span>\r\n          <i className=\"fa fa-chevron-right\" onClick={() => updateLevelSettings(1)}></i>\r\n        </div>\r\n      </label>\r\n\r\n      {/* <label><span>Number of cols:</span><input type=\"number\" name=\"colsnum\" value={colsnum} onChange={onChange} /></label>\r\n      <label><span>Number of rows:</span><input type=\"number\" name=\"rowsnum\" value={rowsnum} onChange={onChange} /></label>\r\n      <label><span>Difficulty:</span>\r\n        <select name=\"difficulty\" onChange={onChange} value={difficulty} >\r\n          <option value=\"1\">easy</option>\r\n          <option value=\"2\">medium</option>\r\n          <option value=\"3\">hard</option>\r\n        </select>\r\n      </label> */}\r\n      <button className=\"btn btn-success\">Start game</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SettingsForm;\r\n","import React from 'react';\r\nimport './Cell.css';\r\n\r\nconst Cell = ({ cell, onContextMenu, onClick, col, row }) => {\r\n\r\n  let cellClass = cell.value === 0 ? 'green-cell' : (cell.value === 'b' ? 'red-cell' : 'blue-cell');\r\n\r\n  if (!cell.open) cellClass = 'blocked-cell';\r\n  if (cell.marked) cellClass = 'marked-cell';\r\n\r\n  const cellValue = cell.open ?\r\n    (cell.value === 0 ?\r\n      null :\r\n      (cell.detonated ?\r\n        <i className=\"fa fa-bomb detonated\"></i> :\r\n        (cell.value === 'b' ?\r\n          <i className=\"fa fa-bomb grey\"></i> :\r\n          cell.value\r\n        )\r\n      )\r\n    ) :\r\n    (cell.marked ?\r\n      <i className=\"fa fa-flag red\"></i> :\r\n      null)\r\n\r\n  return (\r\n    <div className={cellClass} onContextMenu={onContextMenu} onClick={onClick} data-col={col} data-row={row}>\r\n      <span className=\"cell-value\">{cellValue}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\nimport './Game.css'\r\n\r\nconst Game = (props) => {\r\n  const cells = props.field.map((el, index) => {\r\n    const result = [];\r\n\r\n    for (let i = 0; i < el.length; i++) {\r\n      const key = `${index}${i}`\r\n      result.push(< Cell cell={el[i]} key={key} onContextMenu={props.onContextMenu} onClick={props.onClick} col={index} row={i} rowsnum={props.rowsnum} />);\r\n    }\r\n\r\n    return <div key={index} className=\"column\">{result}</div>;\r\n  });\r\n\r\n  const cellFontSize = props.rowsnum === 10 ? '200%' : (props.rowsnum === 15 ? '150%' : '100%');\r\n\r\n  const gameStyle = {\r\n    fontSize: cellFontSize,\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game\" style={gameStyle}>\r\n      {cells}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","export default class GameFieldGenerator {\r\n\r\n  getRand(range) {\r\n    return Math.floor(Math.random() * range);\r\n  }\r\n\r\n  countCellsToOpen(array) {\r\n    return array.reduce((acc, el) => {\r\n      return acc + el.filter(cell => cell.value !== 'b').length;\r\n    }, 0)\r\n  }\r\n\r\n  generateField(cols, rows, difficulty) {\r\n    const field = [];\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n      field[i] = [];\r\n      for (let j = 0; j < rows; j++) {\r\n        field[i][j] = { value: 0, open: false, marked: false };\r\n      }\r\n    }\r\n    const diff = difficulty === 1 ? 0.14 : (difficulty === 2 ? 0.19 : 0.24);\r\n\r\n    const bombNumber = Math.floor(cols * rows * diff);\r\n\r\n    for (let i = 0; i < bombNumber; i++) {\r\n      const c = this.getRand(cols);\r\n      const r = this.getRand(rows);\r\n\r\n      if (field[c][r].value !== 'b') {\r\n        field[c][r].value = 'b';\r\n        const leftCol = c > 0;\r\n        const rightCol = c < cols - 1;\r\n        const topRow = r > 0;\r\n        const bottomRow = r < rows - 1;\r\n\r\n        if (leftCol) {\r\n          if (topRow && !isNaN(field[c - 1][r - 1].value)) {\r\n            field[c - 1][r - 1].value += 1;\r\n          }\r\n          if (!isNaN(field[c - 1][r].value)) {\r\n            field[c - 1][r].value += 1;\r\n          }\r\n          if (bottomRow && !isNaN(field[c - 1][r + 1].value)) {\r\n            field[c - 1][r + 1].value += 1;\r\n          }\r\n        }\r\n\r\n        if (topRow && !isNaN(field[c][r - 1].value)) {\r\n          field[c][r - 1].value += 1;\r\n        }\r\n        if (bottomRow && !isNaN(field[c][r + 1].value)) {\r\n          field[c][r + 1].value += 1;\r\n        }\r\n\r\n        if (rightCol) {\r\n          if (topRow && !isNaN(field[c + 1][r - 1].value)) {\r\n            field[c + 1][r - 1].value += 1;\r\n          }\r\n          if (!isNaN(field[c + 1][r].value)) {\r\n            field[c + 1][r].value += 1;\r\n          }\r\n          if (bottomRow && !isNaN(field[c + 1][r + 1].value)) {\r\n            field[c + 1][r + 1].value += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { field: field, startGame: true, allCells: this.countCellsToOpen(field) };\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport './GameOver.css';\r\n\r\nconst GameOver = ({ newGame }) => {\r\n  return (\r\n    <div className=\"GameOver\">\r\n      <p>Game Over\r\n        <button className=\"btn btn-primary\" onClick={newGame}>Try new game</button>\r\n      </p>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import React from 'react';\r\nimport './Winner.css';\r\n\r\nconst Winner = ({ newGame }) => {\r\n  return (\r\n    <div className=\"Winner\">\r\n      <p>\r\n        Congratulations, You won!\r\n      <button className=\"btn btn-primary\" onClick={newGame}>Try new game</button>\r\n      </p>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Winner;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport SettingsForm from './SettingsForm';\r\nimport Game from './Game';\r\nimport GameFieldGenerator from './services/GameFieldGenerator';\r\nimport GameOver from './GameOver';\r\nimport Winner from './Winner';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    colsnum: 10,\r\n    rowsnum: 10,\r\n    difficulty: 1,\r\n    field: null,\r\n    startGame: false,\r\n    gameOver: false,\r\n    allCells: null,\r\n    openedCells: 0\r\n  }\r\n\r\n  GameFieldGenerator = new GameFieldGenerator();\r\n\r\n  // Game settings\r\n  handleInput = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: parseInt(target.value)\r\n    });\r\n  }\r\n\r\n  updateFieldSettigns = (number) => {\r\n    const newSize = this.state.rowsnum + number;\r\n    if (newSize > 20 || newSize < 10) return;\r\n    this.setState({\r\n      rowsnum: newSize,\r\n      colsnum: newSize\r\n    })\r\n  }\r\n\r\n  updateLevelSettings = (number) => {\r\n    const newLevel = this.state.difficulty + number;\r\n    if (newLevel > 3 || newLevel < 1) return;\r\n    this.setState({\r\n      difficulty: newLevel\r\n    })\r\n  }\r\n\r\n  // New game launching\r\n  handleForm = (e) => {\r\n    e.preventDefault();\r\n    const { colsnum, rowsnum, difficulty } = this.state;\r\n    const game = this.GameFieldGenerator.generateField(colsnum, rowsnum, difficulty);\r\n    this.setState(game)\r\n  }\r\n\r\n  // Right mouse button click (flag/unflag cell)\r\n  handleRightClick = (e) => {\r\n    e.preventDefault();\r\n    const col = e.currentTarget.getAttribute('data-col');\r\n    const row = e.currentTarget.getAttribute('data-row');\r\n    const { field } = this.state;\r\n    if (field[col][row].open) return; // if cell is already opened\r\n    field[col][row].marked = !field[col][row].marked;\r\n    this.setState({ field });\r\n  }\r\n\r\n  // Left mouse button click (opening of cell)\r\n  handleLeftClick = (e) => {\r\n    const col = e.currentTarget.getAttribute('data-col');\r\n    const row = e.currentTarget.getAttribute('data-row');\r\n    const { field, allCells } = this.state;\r\n\r\n    if (field[col][row].open || field[col][row].marked) return; // if cell is already opened or flagged\r\n\r\n    if (field[col][row].value === 0) {\r\n      this.setState({\r\n        field: this.openAllCellsBeside(parseInt(col), parseInt(row), field)\r\n      })\r\n    }\r\n\r\n    if (field[col][row].value === 'b') {\r\n      this.openAllCells(col, row);\r\n      this.setState({ gameOver: true });\r\n      return;\r\n    }\r\n\r\n    field[col][row].open = true;\r\n    const openedCells = this.countOpenedCells(field);\r\n    if (allCells === openedCells) this.openAllCells();\r\n\r\n    this.setState({ openedCells, field });\r\n  }\r\n\r\n  // Counting the number of already open cells\r\n  countOpenedCells = (field) => {\r\n    return field.reduce((acc, el) => {\r\n      return acc + el.filter(cell => cell.open).length;\r\n    }, 0)\r\n  }\r\n\r\n  // Opening of all cells beside the empty cell\r\n  openAllCellsBeside = (c, r, f) => {\r\n    const { colsnum, rowsnum } = this.state;\r\n    let field = f;\r\n    field[c][r].open = true;\r\n\r\n    const openUnmarkCell = (x, y) => {\r\n      field[x][y].open = true;\r\n      field[x][y].marked = false;\r\n      return;\r\n    }\r\n\r\n    const leftCol = c > 0;\r\n    const rightCol = c < colsnum - 1;\r\n    const topRow = r > 0;\r\n    const bottomRow = r < rowsnum - 1;\r\n    if (leftCol) {\r\n      if (topRow) {\r\n        if (field[c - 1][r - 1].value === 0 && !field[c - 1][r - 1].open) {\r\n          field = this.openAllCellsBeside(c - 1, r - 1, field);\r\n        } else {\r\n          openUnmarkCell(c - 1, r - 1);\r\n        }\r\n      }\r\n\r\n      if (field[c - 1][r].value === 0 && !field[c - 1][r].open) {\r\n        field = this.openAllCellsBeside(c - 1, r, field);\r\n      } else {\r\n        openUnmarkCell(c - 1, r);\r\n      }\r\n\r\n      if (bottomRow) {\r\n        if (field[c - 1][r + 1].value === 0 && !field[c - 1][r + 1].open) {\r\n          field = this.openAllCellsBeside(c - 1, r + 1, field);\r\n        } else {\r\n          openUnmarkCell(c - 1, r + 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (topRow) {\r\n      if (field[c][r - 1].value === 0 && !field[c][r - 1].open) {\r\n        field = this.openAllCellsBeside(c, r - 1, field);\r\n      } else {\r\n        openUnmarkCell(c, r - 1);\r\n      }\r\n    }\r\n    if (bottomRow) {\r\n      if (field[c][r + 1].value === 0 && !field[c][r + 1].open) {\r\n        field = this.openAllCellsBeside(c, r + 1, field);\r\n      } else {\r\n        openUnmarkCell(c, r + 1);\r\n      }\r\n    }\r\n\r\n    if (rightCol) {\r\n      if (topRow) {\r\n        if (field[c + 1][r - 1].value === 0 && !field[c + 1][r - 1].open) {\r\n          field = this.openAllCellsBeside(c + 1, r - 1, field);\r\n        } else {\r\n          openUnmarkCell(c + 1, r - 1);\r\n        }\r\n      }\r\n\r\n      if (field[c + 1][r].value === 0 && !field[c + 1][r].open) {\r\n        field = this.openAllCellsBeside(c + 1, r, field);\r\n      } else {\r\n        openUnmarkCell(c + 1, r);\r\n      }\r\n\r\n      if (bottomRow) {\r\n        if (field[c + 1][r + 1].value === 0 && !field[c + 1][r + 1].open) {\r\n          field = this.openAllCellsBeside(c + 1, r + 1, field);\r\n        } else {\r\n          openUnmarkCell(c + 1, r + 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    return field;\r\n  }\r\n\r\n  // Opening of all the cells in the game field\r\n  openAllCells = (col = null, row = null) => {\r\n    const { field, colsnum, rowsnum } = this.state;\r\n    if (col !== null && row !== null) field[col][row].detonated = true;\r\n    for (let i = 0; i < colsnum; i++) {\r\n      for (let j = 0; j < rowsnum; j++) {\r\n        field[i][j].open = true;\r\n        if (col === null && row === null && field[i][j].value === 'b') {\r\n          field[i][j].marked = true;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ field })\r\n  }\r\n\r\n  newGame = () => {\r\n    this.setState({\r\n      startGame: false,\r\n      gameOver: false,\r\n      field: null,\r\n      allCells: null,\r\n      openedCells: 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { colsnum, rowsnum, difficulty, startGame, field, gameOver, allCells, openedCells } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        {startGame ?\r\n          <Game\r\n            field={field}\r\n            rowsnum={rowsnum}\r\n            onContextMenu={this.handleRightClick}\r\n            onClick={this.handleLeftClick}\r\n          /> :\r\n          <SettingsForm\r\n            colsnum={colsnum}\r\n            difficulty={difficulty}\r\n            onChange={this.handleInput}\r\n            onSubmit={this.handleForm}\r\n            updateFieldSettigns={this.updateFieldSettigns}\r\n            updateLevelSettings={this.updateLevelSettings}\r\n          />\r\n        }\r\n        {gameOver ? <GameOver newGame={this.newGame} /> : null}\r\n        {startGame && allCells === openedCells ? <Winner newGame={this.newGame} /> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}